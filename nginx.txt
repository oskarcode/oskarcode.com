
set up the server in aws: 
public IP: 44.201.197.11
pblic domain: ec2-44-201-197-11.compute-1.amazonaws.com
ssh: ssh -i( identificaiton) {private key}  ubuntu@ec2-44-201-197-11.compute-1.amazonaws.com
transfer files from local: scp -i django-server.cer -r( recurrsive) oskar_website ubuntu@ec2-44-201-197-11.compute-1.amazonaws.com:~/oskar_website


update the server settings:
sudo apt-get update
sudo apt-get upgrade -y


venv:
need to create a venv for projects, what it does is to seperate project environmnet with local host environmnet, easy to manage
issues: 1) pyhton version compatability, beter to keep the same python version in local and venv environment, for me, I have python 3.10 in local, and python 3.8 in venv because i need this version for backports.zoneinfo package, and it brings me some erroe when i try to run the application.  
install venv: sudo apt-get install python3-venv
create venv called env: python3 -m venv env
activate venv environment: source env/bin/activate


install required libraries: 
best practise is to pip feeze your environments in local project and put them in requirments.txt files, the commands are: 
- collecting enviroments: pip freeze
- put them into requirments.txt files: pip freeze -> requirments.txt
issues: 1) still python version needed for some of libraried i freezed from local enviornment, e.g., backports.zoneinfo(https://pypi.org/project/backports.zoneinfo/) from local enviornment requires python version smnaller than 3.8, but when i pip isntall python3, it installed python10 in my venv enviornment, so can not install all requirments, for my case, I installed one by one. 


django: pip3 install django #  we need this to set up the django project 
nginx: sudo apt-get install -y nginx # this is the web server i used, I tried with appache2, but stuck with config.files and permissons, so i decided to use nginx instead. It is easier, but there are several key components which we need to understand clearly, otherwise it is hard to do any troubleshooting.  
gunicorn workers: pip3 install gunicorn # since nginx does not understand our web application, we need something to translate the traffic nginx recieved to the web application( jango application in this case), so web application can excute the right codes, and that is gunicorn.
connect with wsgi: gunicorn --bind 0.0.0.0:8000 oskar_website.wsgi:application # via this, gunicorn locates wsgi and talk to the application with wsgi.
Now if you visit your site, you should be able to see the application, but when you stopped gunicorn, the application connecttion will be stopped, so here comes supervisor which helps keep the gunicorn running all the time.


supervisor: sudo apt-get install -y supervisor # this is something very useful when you update the web application, 
set up supervisor config.file : cd /etc/supervisor/conf.d/ # this is the directory for the config
create a new file called gunicorn.conf: sudo touch gunicorn.conf
gunicorn.conf file edit:
[program:gunicorn] # name of the program
directory=/home/ubuntu/oskar_website # where your application file is 
command=/home/ubuntu/env/bin/gunicorn --workers 3 --bind unix:/home/ubuntu/oskar_website/app.sock oskar_website.wsgi:application # the command needs to run /
bind a socket which can read nginx, tell where the wsgi is ( just need to point the location after directory)
autostart=true # whenever the server starts, auto start this program
autorestart=true 
stderr_logfile=/var/log/gunicorn/gunicorn.err.log # error log location
stdout_logfile=/var/log/gunicorn/gunicorn.out.log

[group:guni] # group name is guni
programs:gunicorn


superviousr read the file: 
sudo supervisorctl reread # reread the config 
sudo supervisorctl update # tell the supervisour start the project
sudo supervisorctl status


next step is tell nginx to read from socket file which we defined above.
nginx config:
find config location: cd /etc/nginx/sites-available
create a new file and edit: sudo touch jango.conf
server{
listen 80;
server_name 44.201.197.11 # domain name or IP address

location / {  # when someone visit the root location, it will direct to here
          include proxy_params;
          proxy_pass http://unix:/home/ubuntu/oskar_website/app.sock;
}
{
          location /static/ {
autoindex on;
alias /home/ubuntu/oskar_website/static;

}

}

}

check the status of nginx: sudo nginx -t
enable the config file: sudo ln django.conf /etc/nginx/sites-enabled/
restart the nginx: sudo service nginx restart

error: 1)While I am accessing my port gunicorn mysite.wsgi:application --bind=127.0.0.1:8001 in Nginx server, I am getting the following error in my error log file;
2014/05/30 11:59:42 [crit] 4075#0: *6 connect() to 127.0.0.1:8001 failed (13: Permission denied) while connecting to upstream, client: 127.0.0.1, server: localhost, request: "GET / HTTP/1.1", upstream: "http://127.0.0.1:8001/", host: "localhost:8080"
solution: https://django.fun/en/qa/146882/
2) static files can not be rendered, solution: need to set up the static root in settings.py :STATIC_URL = os.path.join(BASE_DIR, 'static')
3) when i changed settings.py , it is not updated with the server,https://stackoverflow.com/questions/40711747/failed-to-start-gunicorn-service-unit-gunicorn-service-not-found/
 solution: sudo supervisorctl reload, sudo systemctl reload nginx
4) sudo supervisorctl reload does not work , showing can not find gunicorn.service, solution:
create a .service file with-  sudo nano /etc/systemd/system/gunicorn.service, edit the file-
Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=ubuntu    
Group=ubuntu
WorkingDirectory=/home/ubuntu/oskar_website
ExecStart=/home/ubuntu/env/bin/gunicorn -- 
access-logfile - --workers 3 --bind unix:/home/ubuntu/oskar_website/app.sock oskar_website.wsgi:application

[Install]
WantedBy=multi-user.target


eidt the socket files: unicorn socket
[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target
5) after the site runs, the form such as log in/sign up shows error, solution: /
need to add trusted origin in settings.py, CSRF_TRUSTED_ORIGINS = ['https://wwww.oskarcode.com']
https://stackoverflow.com/questions/70285834/forbidden-403-csrf-verification-failed-request-aborted-reason-given-for-fail


video link to refer:
https://www.youtube.com/watch?v=_TBw7ALJp0Y

/home/ubuntu/oskar_website